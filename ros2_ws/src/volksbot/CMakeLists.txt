cmake_minimum_required(VERSION 3.5)
project(volksbot)

# Add standard ROS 2 compile options
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Set C++ standard to C++14
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find necessary ROS 2 packages
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(std_srvs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(volksface REQUIRED)
 

# uncomment the following line if msg/srv/action files are placed within this package
# finds the target generated by rosidl, necessary to link executables/libraries to target
# rosidl_get_typesupport_target(cpp_typesupport_target ${PROJECT_NAME} "rosidl_typesupport_cpp")

link_directories(launch)

add_executable(volksbot
  src/volksbot.cc
)
ament_target_dependencies(volksbot
  rclcpp
  geometry_msgs
  volksface
)
target_link_libraries(volksbot "${cpp_typesupport_target}")

target_include_directories(volksbot PUBLIC
  volksface/include
  # $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  # $<INSTALL_INTERFACE:include>
)

# message( CMAKE_SOURCE_DIR="${CMAKE_SOURCE_DIR}" )

# Define calibration executable
add_executable(calibration 
  src/calibration.cc
)
set_target_properties(calibration PROPERTIES LINK_FLAGS "-pthread")
ament_target_dependencies(calibration
  rclcpp
  std_msgs
  std_srvs
  geometry_msgs
  sensor_msgs
  nav_msgs
  tf2
  tf2_ros
)
target_link_libraries(calibration "${cpp_typesupport_target}") 

# Install executables
install(
  TARGETS calibration volksbot
  DESTINATION lib/${PROJECT_NAME}
)

# Export dependencies and libraries
# if other packages includes the 'volksbot' package, it automatically gets access 
# to the exported dependencies
ament_export_dependencies(rclcpp std_msgs sensor_msgs nav_msgs tf2 tf2_ros tf2_geometry_msgs)


if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()