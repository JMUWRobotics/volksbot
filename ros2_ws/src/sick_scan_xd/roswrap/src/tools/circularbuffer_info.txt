//#include <boost/circular_buffer.hpp>
class CircularBuffer
{
public:
	CircularBuffer(size_t capacity);
	~CircularBuffer();

	size_t size() const { return size_; }
	size_t capacity() const { return capacity_; }
	// Return number of bytes written.
	size_t write(const char *data, size_t bytes);
	// Return number of bytes read.
	size_t read(char *data, size_t bytes);

private:
	size_t beg_index_, end_index_, size_, capacity_;
	char *data_;
};

CircularBuffer::CircularBuffer(size_t capacity)
	: beg_index_(0)
	, end_index_(0)
	, size_(0)
	, capacity_(capacity)
{
	data_ = new char[capacity];
}

CircularBuffer::~CircularBuffer()
{
	delete[] data_;
}

size_t CircularBuffer::write(const char *data, size_t bytes)
{
	if (bytes == 0) return 0;

	size_t capacity = capacity_;
	size_t bytes_to_write = std::min(bytes, capacity - size_);

	// Write in a single step
	if (bytes_to_write <= capacity - end_index_)
	{
		memcpy(data_ + end_index_, data, bytes_to_write);
		end_index_ += bytes_to_write;
		if (end_index_ == capacity) end_index_ = 0;
	}
	// Write in two steps
	else
	{
		size_t size_1 = capacity - end_index_;
		memcpy(data_ + end_index_, data, size_1);
		size_t size_2 = bytes_to_write - size_1;
		memcpy(data_, data + size_1, size_2);
		end_index_ = size_2;
	}

	size_ += bytes_to_write;
	return bytes_to_write;
}

size_t CircularBuffer::read(char *data, size_t bytes)
{
	if (bytes == 0) return 0;

	size_t capacity = capacity_;
	size_t bytes_to_read = std::min(bytes, size_);

	// Read in a single step
	if (bytes_to_read <= capacity - beg_index_)
	{
		memcpy(data, data_ + beg_index_, bytes_to_read);
		beg_index_ += bytes_to_read;
		if (beg_index_ == capacity) beg_index_ = 0;
	}
	// Read in two steps
	else
	{
		size_t size_1 = capacity - beg_index_;
		memcpy(data, data_ + beg_index_, size_1);
		size_t size_2 = bytes_to_read - size_1;
		memcpy(data + size_1, data_, size_2);
		beg_index_ = size_2;
	}

	size_ -= bytes_to_read;
	return bytes_to_read;
}

void circularBufferTest2()
{
	CircularBuffer cirBuf(10000);
	unsigned char bufferIn[100];
	unsigned char bufOut[10];
	int i;
	for (i = 0; i < 100; i++)
	{
		bufferIn[i] = i;
	}
	cirBuf.write((const char *)bufferIn, 100);
	cirBuf.read((char *)bufOut, 10);
}

void circularBufferTest()
{

	//[circular_buffer_example_2
	// Create a circular buffer with a capacity for 3 integers.
	boost::circular_buffer<unsigned char> cb(3);
	int maxSize = cb.capacity();
	// Insert threee elements into the buffer.
	cb.push_back(1);
	cb.push_back(2);
	int filled = cb.size();
	cb.push_back(3);

	int a = cb[0];  // a == 1
	int b = cb[1];  // b == 2
	int c = cb[2];  // c == 3

					// The buffer is full now, so pushing subsequent
					// elements will overwrite the front-most elements.

	cb.push_back(4);  // Overwrite 1 with 4.
	cb.push_back(5);  // Overwrite 2 with 5.

					  // The buffer now contains 3, 4 and 5.
	a = cb[0];  // a == 3
	b = cb[1];  // b == 4
	c = cb[2];  // c == 5

				// Elements can be popped from either the front or the back.
	cb.pop_back();  // 5 is removed.
	cb.pop_front(); // 3 is removed.

					// Leaving only one element with value = 4.
	int d = cb[0];  // d == 4

					//] [/circular_buffer_example_2]
	return;
}

/*

//[circular_buffer_example_output

There is no output from this example.

//] [/circular_buffer_example_output]

*/
