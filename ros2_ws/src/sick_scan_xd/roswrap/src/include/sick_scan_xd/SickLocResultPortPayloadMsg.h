#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/SickLocResultPortPayloadMsg.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_SICKLOCRESULTPORTPAYLOADMSG_H
#define SICK_SCAN_MESSAGE_SICKLOCRESULTPORTPAYLOADMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan_xd
{
template <class ContainerAllocator>
struct SickLocResultPortPayloadMsg_
{
  typedef SickLocResultPortPayloadMsg_<ContainerAllocator> Type;

  SickLocResultPortPayloadMsg_()
    : errorcode(0)
    , scancounter(0)
    , timestamp(0)
    , posex(0)
    , posey(0)
    , poseyaw(0)
    , reserved1(0)
    , reserved2(0)
    , quality(0)
    , outliersratio(0)
    , covariancex(0)
    , covariancey(0)
    , covarianceyaw(0)
    , reserved3(0)  {
    }
  SickLocResultPortPayloadMsg_(const ContainerAllocator& _alloc)
    : errorcode(0)
    , scancounter(0)
    , timestamp(0)
    , posex(0)
    , posey(0)
    , poseyaw(0)
    , reserved1(0)
    , reserved2(0)
    , quality(0)
    , outliersratio(0)
    , covariancex(0)
    , covariancey(0)
    , covarianceyaw(0)
    , reserved3(0)  {
  (void)_alloc;
    }



   typedef uint16_t _errorcode_type;
  _errorcode_type errorcode;

   typedef uint32_t _scancounter_type;
  _scancounter_type scancounter;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef int32_t _posex_type;
  _posex_type posex;

   typedef int32_t _posey_type;
  _posey_type posey;

   typedef int32_t _poseyaw_type;
  _poseyaw_type poseyaw;

   typedef uint32_t _reserved1_type;
  _reserved1_type reserved1;

   typedef int32_t _reserved2_type;
  _reserved2_type reserved2;

   typedef uint8_t _quality_type;
  _quality_type quality;

   typedef uint8_t _outliersratio_type;
  _outliersratio_type outliersratio;

   typedef int32_t _covariancex_type;
  _covariancex_type covariancex;

   typedef int32_t _covariancey_type;
  _covariancey_type covariancey;

   typedef int32_t _covarianceyaw_type;
  _covarianceyaw_type covarianceyaw;

   typedef uint64_t _reserved3_type;
  _reserved3_type reserved3;





  typedef std::shared_ptr< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocResultPortPayloadMsg_

typedef ::sick_scan_xd::SickLocResultPortPayloadMsg_<std::allocator<void> > SickLocResultPortPayloadMsg;

typedef std::shared_ptr< ::sick_scan_xd::SickLocResultPortPayloadMsg > SickLocResultPortPayloadMsgPtr;
typedef std::shared_ptr< ::sick_scan_xd::SickLocResultPortPayloadMsg const> SickLocResultPortPayloadMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator1> & lhs, const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator2> & rhs)
{
  return lhs.errorcode == rhs.errorcode &&
    lhs.scancounter == rhs.scancounter &&
    lhs.timestamp == rhs.timestamp &&
    lhs.posex == rhs.posex &&
    lhs.posey == rhs.posey &&
    lhs.poseyaw == rhs.poseyaw &&
    lhs.reserved1 == rhs.reserved1 &&
    lhs.reserved2 == rhs.reserved2 &&
    lhs.quality == rhs.quality &&
    lhs.outliersratio == rhs.outliersratio &&
    lhs.covariancex == rhs.covariancex &&
    lhs.covariancey == rhs.covariancey &&
    lhs.covarianceyaw == rhs.covarianceyaw &&
    lhs.reserved3 == rhs.reserved3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator1> & lhs, const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b80aed977dece34a3c761a1bbf1b6cec";
  }

  static const char* value(const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb80aed977dece34aULL;
  static const uint64_t static_value2 = 0x3c761a1bbf1b6cecULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/SickLocResultPortPayloadMsg";
  }

  static const char* value(const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of ros message SickLocResultPortPayloadMsg.\n"
"# SickLocResultPortPayloadMsg publishes the payload of a result port telegram\n"
"# for sick localization (52 byte). See chapter 5.9 (\"About result port telegrams\")\n"
"# of the operation manual for further details.\n"
"\n"
"uint16 errorcode      # ErrorCode 0: OK, ErrorCode 1: UNKNOWNERROR. Size: UInt16 = 2 byte\n"
"uint32 scancounter    # Counter of related scan data. Size: UInt32 = 4 byte\n"
"uint32 timestamp      # Time stamp of the pose [ms]. The time stamp indicates the time at which the pose is calculated. Size: UInt32 = 4 byte\n"
"int32  posex          # Position X of the vehicle on the map in cartesian global coordinates [mm]. Size: Int32 = 4 byte\n"
"int32  posey          # Position Y of the vehicle on the map in cartesian global coordinates [mm]. Size: Int32 = 4 byte\n"
"int32  poseyaw        # Orientation (yaw) of the vehicle on the map [mdeg] Size: Int32 = 4 byte\n"
"uint32 reserved1      # Reserved. Size: UInt32 = 4 byte\n"
"int32  reserved2      # Reserved. Size: Int32 = 4 byte\n"
"uint8  quality        # Quality of pose [0 ... 100], 1 = bad pose quality, 100 = good pose quality. Size: UInt8 = 1 byte\n"
"uint8  outliersratio  # Ratio of beams that cannot be assigned to the current reference map [%]. Size: UInt8 = 1 byte\n"
"int32  covariancex    # Covariance c1 of the pose X [mm^2]. Size: Int32 = 4 byte\n"
"int32  covariancey    # Covariance c5 of the pose Y [mm^2]. Size: Int32 = 4 byte\n"
"int32  covarianceyaw  # Covariance c9 of the pose Yaw [mdeg^2]. Size: Int32 = 4 byte\n"
"uint64 reserved3      # Reserved. Size: UInt64 = 8 byte\n"
"\n"
;
  }

  static const char* value(const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.errorcode);
      stream.next(m.scancounter);
      stream.next(m.timestamp);
      stream.next(m.posex);
      stream.next(m.posey);
      stream.next(m.poseyaw);
      stream.next(m.reserved1);
      stream.next(m.reserved2);
      stream.next(m.quality);
      stream.next(m.outliersratio);
      stream.next(m.covariancex);
      stream.next(m.covariancey);
      stream.next(m.covarianceyaw);
      stream.next(m.reserved3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocResultPortPayloadMsg_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan_xd::SickLocResultPortPayloadMsg_<ContainerAllocator>& v)
  {
    s << indent << "errorcode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.errorcode);
    s << indent << "scancounter: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.scancounter);
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "posex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.posex);
    s << indent << "posey: ";
    Printer<int32_t>::stream(s, indent + "  ", v.posey);
    s << indent << "poseyaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.poseyaw);
    s << indent << "reserved1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved1);
    s << indent << "reserved2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.reserved2);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
    s << indent << "outliersratio: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.outliersratio);
    s << indent << "covariancex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.covariancex);
    s << indent << "covariancey: ";
    Printer<int32_t>::stream(s, indent + "  ", v.covariancey);
    s << indent << "covarianceyaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.covarianceyaw);
    s << indent << "reserved3: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.reserved3);
  }
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_SICKLOCRESULTPORTPAYLOADMSG_H
