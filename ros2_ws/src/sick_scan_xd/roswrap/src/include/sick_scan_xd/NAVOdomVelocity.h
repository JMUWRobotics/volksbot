#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/NAVOdomVelocity.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_NAVODOMVELOCITY_H
#define SICK_SCAN_MESSAGE_NAVODOMVELOCITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan_xd
{
template <class ContainerAllocator>
struct NAVOdomVelocity_
{
  typedef NAVOdomVelocity_<ContainerAllocator> Type;

  NAVOdomVelocity_()
    : vel_x(0.0)
    , vel_y(0.0)
    , omega(0.0)
    , timestamp(0)
    , coordbase(0)  {
    }
  NAVOdomVelocity_(const ContainerAllocator& _alloc)
    : vel_x(0.0)
    , vel_y(0.0)
    , omega(0.0)
    , timestamp(0)
    , coordbase(0)  {
  (void)_alloc;
    }



   typedef float _vel_x_type;
  _vel_x_type vel_x;

   typedef float _vel_y_type;
  _vel_y_type vel_y;

   typedef float _omega_type;
  _omega_type omega;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _coordbase_type;
  _coordbase_type coordbase;





  typedef std::shared_ptr< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct NAVOdomVelocity_

typedef ::sick_scan_xd::NAVOdomVelocity_<std::allocator<void> > NAVOdomVelocity;

typedef std::shared_ptr< ::sick_scan_xd::NAVOdomVelocity > NAVOdomVelocityPtr;
typedef std::shared_ptr< ::sick_scan_xd::NAVOdomVelocity const> NAVOdomVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator1> & lhs, const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.vel_x == rhs.vel_x &&
    lhs.vel_y == rhs.vel_y &&
    lhs.omega == rhs.omega &&
    lhs.timestamp == rhs.timestamp &&
    lhs.coordbase == rhs.coordbase;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator1> & lhs, const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ae8fb3e58991f0b8bd5ceefb3e1ca1d";
  }

  static const char* value(const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ae8fb3e58991f0bULL;
  static const uint64_t static_value2 = 0x8bd5ceefb3e1ca1dULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/NAVOdomVelocity";
  }

  static const char* value(const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ROS message for NAV350 velocity/odometry data, see sick_nav_scandata_parser.h and NAV-350 telegram listing for details (\"sMN mNPOSSetSpeed\").\n"
"\n"
"float32 vel_x # x-component of velocity in the coordinate system defined by coordbase in m/s, -32.0 ... +32.0 m/s\n"
"float32 vel_y # y-component of velocity in the coordinate system defined by coordbase in m/s, -32.0 ... +32.0 m/s\n"
"float32 omega # angular velocity of the NAV350 in radians/s, -2*PI ... +2*PI rad/s\n"
"uint32 timestamp # Timestamp of the Velocity vector related to the NAV350 clock\n"
"uint8 coordbase # Coordinate system of the velocity vector (local or global), 0 = local coordinate system of the NAV350, 1 = absolute coordinate system\n"
;
  }

  static const char* value(const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel_x);
      stream.next(m.vel_y);
      stream.next(m.omega);
      stream.next(m.timestamp);
      stream.next(m.coordbase);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NAVOdomVelocity_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan_xd::NAVOdomVelocity_<ContainerAllocator>& v)
  {
    s << indent << "vel_x: ";
    Printer<float>::stream(s, indent + "  ", v.vel_x);
    s << indent << "vel_y: ";
    Printer<float>::stream(s, indent + "  ", v.vel_y);
    s << indent << "omega: ";
    Printer<float>::stream(s, indent + "  ", v.omega);
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "coordbase: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.coordbase);
  }
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_NAVODOMVELOCITY_H
