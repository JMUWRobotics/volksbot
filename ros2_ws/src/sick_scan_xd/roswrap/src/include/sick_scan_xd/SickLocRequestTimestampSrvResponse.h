#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/SickLocRequestTimestampSrvResponse.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_SICKLOCREQUESTTIMESTAMPSRVRESPONSE_H
#define SICK_SCAN_MESSAGE_SICKLOCREQUESTTIMESTAMPSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan_xd
{
template <class ContainerAllocator>
struct SickLocRequestTimestampSrvResponse_
{
  typedef SickLocRequestTimestampSrvResponse_<ContainerAllocator> Type;

  SickLocRequestTimestampSrvResponse_()
    : timestamp_lidar_ms(0)
    , mean_time_vehicle_ms(0)
    , delta_time_ms(0)
    , send_time_vehicle_sec(0)
    , send_time_vehicle_nsec(0)
    , receive_time_vehicle_sec(0)
    , receive_time_vehicle_nsec(0)  {
    }
  SickLocRequestTimestampSrvResponse_(const ContainerAllocator& _alloc)
    : timestamp_lidar_ms(0)
    , mean_time_vehicle_ms(0)
    , delta_time_ms(0)
    , send_time_vehicle_sec(0)
    , send_time_vehicle_nsec(0)
    , receive_time_vehicle_sec(0)
    , receive_time_vehicle_nsec(0)  {
  (void)_alloc;
    }



   typedef uint32_t _timestamp_lidar_ms_type;
  _timestamp_lidar_ms_type timestamp_lidar_ms;

   typedef uint64_t _mean_time_vehicle_ms_type;
  _mean_time_vehicle_ms_type mean_time_vehicle_ms;

   typedef uint64_t _delta_time_ms_type;
  _delta_time_ms_type delta_time_ms;

   typedef uint32_t _send_time_vehicle_sec_type;
  _send_time_vehicle_sec_type send_time_vehicle_sec;

   typedef uint32_t _send_time_vehicle_nsec_type;
  _send_time_vehicle_nsec_type send_time_vehicle_nsec;

   typedef uint32_t _receive_time_vehicle_sec_type;
  _receive_time_vehicle_sec_type receive_time_vehicle_sec;

   typedef uint32_t _receive_time_vehicle_nsec_type;
  _receive_time_vehicle_nsec_type receive_time_vehicle_nsec;





  typedef std::shared_ptr< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocRequestTimestampSrvResponse_

typedef ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<std::allocator<void> > SickLocRequestTimestampSrvResponse;

typedef std::shared_ptr< ::sick_scan_xd::SickLocRequestTimestampSrvResponse > SickLocRequestTimestampSrvResponsePtr;
typedef std::shared_ptr< ::sick_scan_xd::SickLocRequestTimestampSrvResponse const> SickLocRequestTimestampSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator1> & lhs, const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp_lidar_ms == rhs.timestamp_lidar_ms &&
    lhs.mean_time_vehicle_ms == rhs.mean_time_vehicle_ms &&
    lhs.delta_time_ms == rhs.delta_time_ms &&
    lhs.send_time_vehicle_sec == rhs.send_time_vehicle_sec &&
    lhs.send_time_vehicle_nsec == rhs.send_time_vehicle_nsec &&
    lhs.receive_time_vehicle_sec == rhs.receive_time_vehicle_sec &&
    lhs.receive_time_vehicle_nsec == rhs.receive_time_vehicle_nsec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator1> & lhs, const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae8b1571bf8be63e0bdad9873d14be2b";
  }

  static const char* value(const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae8b1571bf8be63eULL;
  static const uint64_t static_value2 = 0x0bdad9873d14be2bULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/SickLocRequestTimestampSrvResponse";
  }

  static const char* value(const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#\n"
"# Response (output)\n"
"#\n"
"\n"
"uint32 timestamp_lidar_ms        # Lidar timestamp in milliseconds from LocRequestTimestamp response\n"
"uint64 mean_time_vehicle_ms      # Vehicle mean timestamp in milliseconds: (send_time_vehicle + receive_time_vehicle) / 2\n"
"uint64 delta_time_ms             # Time offset: mean_time_vehicle_ms - timestamp_lidar_ms\n"
"\n"
"uint32 send_time_vehicle_sec     # Vehicle timestamp when sending LocRequestTimestamp (seconds part of ros timestamp immediately before tcp send)\n"
"uint32 send_time_vehicle_nsec    # Vehicle timestamp when sending LocRequestTimestamp (nano seconds part of ros timestamp immediately before tcp send)\n"
"uint32 receive_time_vehicle_sec  # Vehicle timestamp when receiving the LocRequestTimestamp response (seconds part of ros timestamp immediately after first response byte received)\n"
"uint32 receive_time_vehicle_nsec # Vehicle timestamp when receiving the LocRequestTimestamp response (nano seconds part of ros timestamp immediately after first response byte received)\n"
"\n"
;
  }

  static const char* value(const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_lidar_ms);
      stream.next(m.mean_time_vehicle_ms);
      stream.next(m.delta_time_ms);
      stream.next(m.send_time_vehicle_sec);
      stream.next(m.send_time_vehicle_nsec);
      stream.next(m.receive_time_vehicle_sec);
      stream.next(m.receive_time_vehicle_nsec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocRequestTimestampSrvResponse_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan_xd::SickLocRequestTimestampSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_lidar_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp_lidar_ms);
    s << indent << "mean_time_vehicle_ms: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.mean_time_vehicle_ms);
    s << indent << "delta_time_ms: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.delta_time_ms);
    s << indent << "send_time_vehicle_sec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.send_time_vehicle_sec);
    s << indent << "send_time_vehicle_nsec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.send_time_vehicle_nsec);
    s << indent << "receive_time_vehicle_sec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.receive_time_vehicle_sec);
    s << indent << "receive_time_vehicle_nsec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.receive_time_vehicle_nsec);
  }
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_SICKLOCREQUESTTIMESTAMPSRVRESPONSE_H
