#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/SickLocRequestTimestampSrvRequest.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_SICKLOCREQUESTTIMESTAMPSRVREQUEST_H
#define SICK_SCAN_MESSAGE_SICKLOCREQUESTTIMESTAMPSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan_xd
{
template <class ContainerAllocator>
struct SickLocRequestTimestampSrvRequest_
{
  typedef SickLocRequestTimestampSrvRequest_<ContainerAllocator> Type;

  SickLocRequestTimestampSrvRequest_()
    {
    }
  SickLocRequestTimestampSrvRequest_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }







  typedef std::shared_ptr< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocRequestTimestampSrvRequest_

typedef ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<std::allocator<void> > SickLocRequestTimestampSrvRequest;

typedef std::shared_ptr< ::sick_scan_xd::SickLocRequestTimestampSrvRequest > SickLocRequestTimestampSrvRequestPtr;
typedef std::shared_ptr< ::sick_scan_xd::SickLocRequestTimestampSrvRequest const> SickLocRequestTimestampSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/SickLocRequestTimestampSrvRequest";
  }

  static const char* value(const ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of ROS service SickLocRequestTimestamp for sick localization.\n"
"#\n"
"# ROS service SickLocRequestTimestamp requests a timestamp from the localization controller\n"
"# by sending cola command LocRequestTimestamp (\"sMN LocRequestTimestamp\").\n"
"#\n"
"# The service receives and decodes the current timestamp (uint32 timestamp in milliseconds)\n"
"# and calculates the time offset with the following formular:\n"
"#\n"
"# delta_time_ms := mean_time_vehicle_ms - timestamp_lidar_ms\n"
"# mean_time_vehicle_ms := (send_time_vehicle + receive_time_vehicle) / 2\n"
"#                      := vehicles mean timestamp in milliseconds\n"
"# send_time_vehicle    := vehicles timestamp when sending LocRequestTimestamp\n"
"# receive_time_vehicle := vehicles timestamp when receiving the LocRequestTimestamp response\n"
"# timestamp_lidar_ms   := lidar timestamp in milliseconds from LocRequestTimestamp response\n"
"#\n"
"# See Operation-Instruction-v1.1.0.241R.pdf for details about time synchronization and\n"
"# time offset calculation. See Telegram-Listing-v1.1.0.241R.pdf and Technical_information_Telegram_Listing_NAV_LOC_en_IM0076556.pdf\n"
"# for further details about Cola telegram LocRequestTimestamp.\n"
"\n"
"#\n"
"# Request (input)\n"
"#\n"
"\n"
;
  }

  static const char* value(const ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocRequestTimestampSrvRequest_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::sick_scan_xd::SickLocRequestTimestampSrvRequest_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_SICKLOCREQUESTTIMESTAMPSRVREQUEST_H
