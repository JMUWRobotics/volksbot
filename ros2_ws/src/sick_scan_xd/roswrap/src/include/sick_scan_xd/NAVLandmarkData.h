#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/NAVLandmarkData.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_NAVLANDMARKDATA_H
#define SICK_SCAN_MESSAGE_NAVLANDMARKDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sick_scan_xd/NAVReflectorData.h>

namespace sick_scan_xd
{
template <class ContainerAllocator>
struct NAVLandmarkData_
{
  typedef NAVLandmarkData_<ContainerAllocator> Type;

  NAVLandmarkData_()
    : header()
    , landmark_filter(0)
    , num_reflectors(0)
    , reflectors()  {
    }
  NAVLandmarkData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , landmark_filter(0)
    , num_reflectors(0)
    , reflectors(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _landmark_filter_type;
  _landmark_filter_type landmark_filter;

   typedef uint16_t _num_reflectors_type;
  _num_reflectors_type num_reflectors;

   typedef std::vector< ::sick_scan_xd::NAVReflectorData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::sick_scan_xd::NAVReflectorData_<ContainerAllocator> >> _reflectors_type;
  _reflectors_type reflectors;





  typedef std::shared_ptr< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> const> ConstPtr;

}; // struct NAVLandmarkData_

typedef ::sick_scan_xd::NAVLandmarkData_<std::allocator<void> > NAVLandmarkData;

typedef std::shared_ptr< ::sick_scan_xd::NAVLandmarkData > NAVLandmarkDataPtr;
typedef std::shared_ptr< ::sick_scan_xd::NAVLandmarkData const> NAVLandmarkDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator1> & lhs, const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.landmark_filter == rhs.landmark_filter &&
    lhs.num_reflectors == rhs.num_reflectors &&
    lhs.reflectors == rhs.reflectors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator1> & lhs, const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6978f0aa2a911a9f94328887e912f9fb";
  }

  static const char* value(const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6978f0aa2a911a9fULL;
  static const uint64_t static_value2 = 0x94328887e912f9fbULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/NAVLandmarkData";
  }

  static const char* value(const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ROS message of NAV350LandmarkData, see sick_nav_scandata_parser.h and NAV-350 telegram listing for details.\n"
"std_msgs/Header header\n"
"\n"
"uint8 landmark_filter\n"
"uint16 num_reflectors\n"
"sick_scan/NAVReflectorData[] reflectors\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sick_scan/NAVReflectorData\n"
"# ROS message of NAV350ReflectorData, see sick_nav_scandata_parser.h and NAV-350 telegram listing for details.\n"
"\n"
"# cartesian data in lidar coordinates in mm\n"
"uint16 cartesian_data_valid\n"
"int32 x\n"
"int32 y\n"
"\n"
"# polar data in lidar coordinates in mm and mdeg\n"
"uint16 polar_data_valid\n"
"uint32 dist\n"
"uint32 phi\n"
"\n"
"# optional reflector data\n"
"uint16 opt_reflector_data_valid\n"
"uint16 local_id\n"
"uint16 global_id\n"
"uint8 type \n"
"uint16 sub_type\n"
"uint16 quality\n"
"uint32 timestamp\n"
"uint16 size\n"
"uint16 hit_count\n"
"uint16 mean_echo\n"
"uint16 start_index\n"
"uint16 end_index\n"
"\n"
"# reflector position in ros coordinates\n"
"int8 pos_valid   # pose_x, pose_y and pose_yaw are valid if pose_valid > 0\n"
"float32 pos_x    # x position in ros coordinates in m\n"
"float32 pos_y    # y position in ros coordinates in m\n"
;
  }

  static const char* value(const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.landmark_filter);
      stream.next(m.num_reflectors);
      stream.next(m.reflectors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NAVLandmarkData_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan_xd::NAVLandmarkData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "landmark_filter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.landmark_filter);
    s << indent << "num_reflectors: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.num_reflectors);
    s << indent << "reflectors[]" << std::endl;
    for (size_t i = 0; i < v.reflectors.size(); ++i)
    {
      s << indent << "  reflectors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sick_scan_xd::NAVReflectorData_<ContainerAllocator> >::stream(s, indent + "    ", v.reflectors[i]);
    }
  }
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_NAVLANDMARKDATA_H
