#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/SickLocResultPortCrcMsg.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_SICKLOCRESULTPORTCRCMSG_H
#define SICK_SCAN_MESSAGE_SICKLOCRESULTPORTCRCMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan_xd
{
template <class ContainerAllocator>
struct SickLocResultPortCrcMsg_
{
  typedef SickLocResultPortCrcMsg_<ContainerAllocator> Type;

  SickLocResultPortCrcMsg_()
    : checksum(0)  {
    }
  SickLocResultPortCrcMsg_(const ContainerAllocator& _alloc)
    : checksum(0)  {
  (void)_alloc;
    }



   typedef uint16_t _checksum_type;
  _checksum_type checksum;





  typedef std::shared_ptr< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocResultPortCrcMsg_

typedef ::sick_scan_xd::SickLocResultPortCrcMsg_<std::allocator<void> > SickLocResultPortCrcMsg;

typedef std::shared_ptr< ::sick_scan_xd::SickLocResultPortCrcMsg > SickLocResultPortCrcMsgPtr;
typedef std::shared_ptr< ::sick_scan_xd::SickLocResultPortCrcMsg const> SickLocResultPortCrcMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator1> & lhs, const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator2> & rhs)
{
  return lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator1> & lhs, const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "737523c5a09c7e8b24d62bea27dfa343";
  }

  static const char* value(const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x737523c5a09c7e8bULL;
  static const uint64_t static_value2 = 0x24d62bea27dfa343ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/SickLocResultPortCrcMsg";
  }

  static const char* value(const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Definition of ros message SickLocResultPortCrcMsg.\n"
"# SickLocResultPortCrcMsg publishes the CRC trailer of a result port telegram\n"
"# for sick localization (2 byte). \n"
"# Checksum details:\n"
"# * Width: 16 bits\n"
"# * Truncated polynomial: 0x1021 CRC polynomials with orders of x16 + x12 + x5 + 1 (counted without the leading '1' bit)\n"
"# * Initial value = 0xFFFF\n"
"# See chapter 5.9 (\"About result port telegrams\") of the operation manual for further details.\n"
"\n"
"uint16 checksum # CRC16-CCITT over length of header (52 bytes) and payload (52 bytes) without 2 bytes of this trailer. Size: UInt16 = 2 byte\n"
"\n"
;
  }

  static const char* value(const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocResultPortCrcMsg_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan_xd::SickLocResultPortCrcMsg_<ContainerAllocator>& v)
  {
    s << indent << "checksum: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_SICKLOCRESULTPORTCRCMSG_H
