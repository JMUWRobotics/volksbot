#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/RadarPreHeaderEncoderBlock.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_RADARPREHEADERENCODERBLOCK_H
#define SICK_SCAN_MESSAGE_RADARPREHEADERENCODERBLOCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan_xd
{
template <class ContainerAllocator>
struct RadarPreHeaderEncoderBlock_
{
  typedef RadarPreHeaderEncoderBlock_<ContainerAllocator> Type;

  RadarPreHeaderEncoderBlock_()
    : udiencoderpos(0)
    , iencoderspeed(0)  {
    }
  RadarPreHeaderEncoderBlock_(const ContainerAllocator& _alloc)
    : udiencoderpos(0)
    , iencoderspeed(0)  {
  (void)_alloc;
    }



   typedef uint32_t _udiencoderpos_type;
  _udiencoderpos_type udiencoderpos;

   typedef int16_t _iencoderspeed_type;
  _iencoderspeed_type iencoderspeed;





  typedef std::shared_ptr< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> const> ConstPtr;

}; // struct RadarPreHeaderEncoderBlock_

typedef ::sick_scan_xd::RadarPreHeaderEncoderBlock_<std::allocator<void> > RadarPreHeaderEncoderBlock;

typedef std::shared_ptr< ::sick_scan_xd::RadarPreHeaderEncoderBlock > RadarPreHeaderEncoderBlockPtr;
typedef std::shared_ptr< ::sick_scan_xd::RadarPreHeaderEncoderBlock const> RadarPreHeaderEncoderBlockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator1> & lhs, const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator2> & rhs)
{
  return lhs.udiencoderpos == rhs.udiencoderpos &&
    lhs.iencoderspeed == rhs.iencoderspeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator1> & lhs, const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe409801376c90135322466d8a5244ac";
  }

  static const char* value(const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe409801376c9013ULL;
  static const uint64_t static_value2 = 0x5322466d8a5244acULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/RadarPreHeaderEncoderBlock";
  }

  static const char* value(const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Array with connected encoder sensors\n"
"# ROS-1:\n"
"#uint32 udiEncoderPos  # encoder position [inc]\n"
"#int16 iEncoderSpeed   # encoder speed [inc/mm]\n"
"# ROS-2:\n"
"uint32 udiencoderpos  # encoder position [inc]\n"
"int16 iencoderspeed   # encoder speed [inc/mm]\n"
;
  }

  static const char* value(const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.udiencoderpos);
      stream.next(m.iencoderspeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarPreHeaderEncoderBlock_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan_xd::RadarPreHeaderEncoderBlock_<ContainerAllocator>& v)
  {
    s << indent << "udiencoderpos: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.udiencoderpos);
    s << indent << "iencoderspeed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.iencoderspeed);
  }
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_RADARPREHEADERENCODERBLOCK_H
