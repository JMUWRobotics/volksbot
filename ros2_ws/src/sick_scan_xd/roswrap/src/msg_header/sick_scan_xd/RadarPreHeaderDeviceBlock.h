#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/RadarPreHeaderDeviceBlock.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_RADARPREHEADERDEVICEBLOCK_H
#define SICK_SCAN_MESSAGE_RADARPREHEADERDEVICEBLOCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan_xd
{
template <class ContainerAllocator>
struct RadarPreHeaderDeviceBlock_
{
  typedef RadarPreHeaderDeviceBlock_<ContainerAllocator> Type;

  RadarPreHeaderDeviceBlock_()
    : uiident(0)
    , udiserialno(0)
    , bdeviceerror(false)
    , bcontaminationwarning(false)
    , bcontaminationerror(false)  {
    }
  RadarPreHeaderDeviceBlock_(const ContainerAllocator& _alloc)
    : uiident(0)
    , udiserialno(0)
    , bdeviceerror(false)
    , bcontaminationwarning(false)
    , bcontaminationerror(false)  {
  (void)_alloc;
    }



   typedef uint32_t _uiident_type;
  _uiident_type uiident;

   typedef uint32_t _udiserialno_type;
  _udiserialno_type udiserialno;

   typedef uint8_t _bdeviceerror_type;
  _bdeviceerror_type bdeviceerror;

   typedef uint8_t _bcontaminationwarning_type;
  _bcontaminationwarning_type bcontaminationwarning;

   typedef uint8_t _bcontaminationerror_type;
  _bcontaminationerror_type bcontaminationerror;





  typedef std::shared_ptr< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> const> ConstPtr;

}; // struct RadarPreHeaderDeviceBlock_

typedef ::sick_scan_xd::RadarPreHeaderDeviceBlock_<std::allocator<void> > RadarPreHeaderDeviceBlock;

typedef std::shared_ptr< ::sick_scan_xd::RadarPreHeaderDeviceBlock > RadarPreHeaderDeviceBlockPtr;
typedef std::shared_ptr< ::sick_scan_xd::RadarPreHeaderDeviceBlock const> RadarPreHeaderDeviceBlockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator1> & lhs, const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator2> & rhs)
{
  return lhs.uiident == rhs.uiident &&
    lhs.udiserialno == rhs.udiserialno &&
    lhs.bdeviceerror == rhs.bdeviceerror &&
    lhs.bcontaminationwarning == rhs.bcontaminationwarning &&
    lhs.bcontaminationerror == rhs.bcontaminationerror;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator1> & lhs, const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be30eec819eb95fab7fceb700298df91";
  }

  static const char* value(const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe30eec819eb95faULL;
  static const uint64_t static_value2 = 0xb7fceb700298df91ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/RadarPreHeaderDeviceBlock";
  }

  static const char* value(const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"#\n"
"#\n"
"#\n"
"\n"
"# ROS-1:\n"
"#uint32 uiIdent             # Logical number of the device\"\n"
"#uint32 udiSerialNo         # Serial number of the device\n"
"#bool bDeviceError          # State of the device\n"
"#bool bContaminationWarning # Contamination Warning\n"
"#bool bContaminationError   # Contamination Error\n"
"\n"
"# ROS-2:\n"
"uint32 uiident             # Logical number of the device\"\n"
"uint32 udiserialno         # Serial number of the device\n"
"bool bdeviceerror          # State of the device\n"
"bool bcontaminationwarning # Contamination Warning\n"
"bool bcontaminationerror   # Contamination Error\n"
;
  }

  static const char* value(const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uiident);
      stream.next(m.udiserialno);
      stream.next(m.bdeviceerror);
      stream.next(m.bcontaminationwarning);
      stream.next(m.bcontaminationerror);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RadarPreHeaderDeviceBlock_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan_xd::RadarPreHeaderDeviceBlock_<ContainerAllocator>& v)
  {
    s << indent << "uiident: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uiident);
    s << indent << "udiserialno: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.udiserialno);
    s << indent << "bdeviceerror: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bdeviceerror);
    s << indent << "bcontaminationwarning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bcontaminationwarning);
    s << indent << "bcontaminationerror: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bcontaminationerror);
  }
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_RADARPREHEADERDEVICEBLOCK_H
