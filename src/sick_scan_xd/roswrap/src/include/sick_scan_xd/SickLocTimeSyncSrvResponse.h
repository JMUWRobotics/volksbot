#include "sick_scan/sick_scan_base.h" /* Base definitions included in all header files, added by add_sick_scan_base_header.py. Do not edit this line. */
// Generated by gencpp from file sick_scan/SickLocTimeSyncSrvResponse.msg
// DO NOT EDIT!


#ifndef SICK_SCAN_MESSAGE_SICKLOCTIMESYNCSRVRESPONSE_H
#define SICK_SCAN_MESSAGE_SICKLOCTIMESYNCSRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sick_scan_xd
{
template <class ContainerAllocator>
struct SickLocTimeSyncSrvResponse_
{
  typedef SickLocTimeSyncSrvResponse_<ContainerAllocator> Type;

  SickLocTimeSyncSrvResponse_()
    : vehicle_time_valid(false)
    , vehicle_time_sec(0)
    , vehicle_time_nsec(0)  {
    }
  SickLocTimeSyncSrvResponse_(const ContainerAllocator& _alloc)
    : vehicle_time_valid(false)
    , vehicle_time_sec(0)
    , vehicle_time_nsec(0)  {
  (void)_alloc;
    }



   typedef uint8_t _vehicle_time_valid_type;
  _vehicle_time_valid_type vehicle_time_valid;

   typedef uint32_t _vehicle_time_sec_type;
  _vehicle_time_sec_type vehicle_time_sec;

   typedef uint32_t _vehicle_time_nsec_type;
  _vehicle_time_nsec_type vehicle_time_nsec;





  typedef std::shared_ptr< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SickLocTimeSyncSrvResponse_

typedef ::sick_scan_xd::SickLocTimeSyncSrvResponse_<std::allocator<void> > SickLocTimeSyncSrvResponse;

typedef std::shared_ptr< ::sick_scan_xd::SickLocTimeSyncSrvResponse > SickLocTimeSyncSrvResponsePtr;
typedef std::shared_ptr< ::sick_scan_xd::SickLocTimeSyncSrvResponse const> SickLocTimeSyncSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator1> & lhs, const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.vehicle_time_valid == rhs.vehicle_time_valid &&
    lhs.vehicle_time_sec == rhs.vehicle_time_sec &&
    lhs.vehicle_time_nsec == rhs.vehicle_time_nsec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator1> & lhs, const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sick_scan_xd

namespace roswrap
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf6450e0c6b2fb33be19dfbfcc6f9815";
  }

  static const char* value(const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf6450e0c6b2fb33ULL;
  static const uint64_t static_value2 = 0xbe19dfbfcc6f9815ULL;
};

template<class ContainerAllocator>
struct DataType< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sick_scan/SickLocTimeSyncSrvResponse";
  }

  static const char* value(const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#\n"
"# Response (output): System time calculated by software pll\n"
"#\n"
"\n"
"bool   vehicle_time_valid  # true: vehicle_time_sec and vehicle_time_nsec valid, false: software pll still in initial phase\n"
"uint32 vehicle_time_sec    # Time of vehicles pose calculated by software pll (seconds part of the system time)\n"
"uint32 vehicle_time_nsec   # Time of vehicles pose calculated by software pll (nano seconds part of the system time)\n"
"\n"
;
  }

  static const char* value(const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace roswrap

namespace roswrap
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicle_time_valid);
      stream.next(m.vehicle_time_sec);
      stream.next(m.vehicle_time_nsec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SickLocTimeSyncSrvResponse_

} // namespace serialization
} // namespace roswrap

namespace roswrap
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sick_scan_xd::SickLocTimeSyncSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "vehicle_time_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_time_valid);
    s << indent << "vehicle_time_sec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vehicle_time_sec);
    s << indent << "vehicle_time_nsec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vehicle_time_nsec);
  }
};

} // namespace message_operations
} // namespace roswrap

#endif // SICK_SCAN_MESSAGE_SICKLOCTIMESYNCSRVRESPONSE_H
