// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from sick_scan_xd:msg/RadarScan.idl
// generated code does not contain a copyright notice

#ifndef SICK_SCAN_XD__MSG__DETAIL__RADAR_SCAN__STRUCT_H_
#define SICK_SCAN_XD__MSG__DETAIL__RADAR_SCAN__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "std_msgs/msg/detail/header__struct.h"
// Member 'radarpreheader'
#include "sick_scan_xd/msg/detail/radar_pre_header__struct.h"
// Member 'targets'
#include "sensor_msgs/msg/detail/point_cloud2__struct.h"
// Member 'objects'
#include "sick_scan_xd/msg/detail/radar_object__struct.h"

/// Struct defined in msg/RadarScan in the package sick_scan_xd.
/**
  *  The message is divided into three parts:
  *  1. Header: containing information about general radar parameters
  *  2. RawTargets: List of targets containing maximum values in the range-doppler-matrix - used for tracking
  *  3. Objects: List of objects generated by the internal tracking algorithm - based on raw targets
  *  ROS-1:
  * Header header
  * RadarPreHeader radarPreHeader
  *  ROS-2:
 */
typedef struct sick_scan_xd__msg__RadarScan
{
  std_msgs__msg__Header header;
  sick_scan_xd__msg__RadarPreHeader radarpreheader;
  sensor_msgs__msg__PointCloud2 targets;
  sick_scan_xd__msg__RadarObject__Sequence objects;
} sick_scan_xd__msg__RadarScan;

// Struct for a sequence of sick_scan_xd__msg__RadarScan.
typedef struct sick_scan_xd__msg__RadarScan__Sequence
{
  sick_scan_xd__msg__RadarScan * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} sick_scan_xd__msg__RadarScan__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // SICK_SCAN_XD__MSG__DETAIL__RADAR_SCAN__STRUCT_H_
